import {Rule} from 'eslint';

import {getMemberExpression} from './handlers/member-expression';
import {BaseRuleOptions, RuleOptions} from './types';

const DEFAULT_MEMBER_EXPRESSIONS: RuleOptions['memberExpressions'] = [
    {member: 'intl', property: 'createMessages'},
];
const DEFAULT_IDENTIFIER_NAME = 'id';

export const rule: Rule.RuleModule = {
    meta: {
        fixable: 'code',
        docs: {
            description: 'Add autogenerated message id',
        },
        schema: [
            {
                type: 'object',
                properties: {
                    memberExpressions: {type: 'array'},
                    idName: {type: 'string'},
                    namespaceMatchers: {type: 'array'},
                },
            },
        ],
    },

    create(context: Rule.RuleContext) {
        const {
            memberExpressions = DEFAULT_MEMBER_EXPRESSIONS,
            idName = DEFAULT_IDENTIFIER_NAME,
            namespaceMatchers,
            generateId,
            maxValidLength,
            invalidCharsPattern,
            invalidCharsReplacement,
            invalidCharsReplacer,
        }: RuleOptions = context.options[0] || {};

        const baseParameters: BaseRuleOptions = {
            generateId,
            namespaceMatchers,
            context,
            idName,
            maxValidLength,
            invalidCharsPattern,
            invalidCharsReplacement,
            invalidCharsReplacer,
        };

        return {
            ...(memberExpressions?.length
                ? {
                      MemberExpression: getMemberExpression({
                          ...baseParameters,
                          memberExpressions,
                      }),
                  }
                : {}),
        };
    },
};
